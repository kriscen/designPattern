# 设计模式七大原则
- [单一职责原则](#单一职责原则)
- [接口隔离原则](#接口隔离原则)
- [依赖倒转原则](#依赖倒转原则)
- [里氏替换原则](#里氏替换原则)
- [开闭原则OCP](#开闭原则OCP)
- [迪米特法则](#迪米特法则)
- [合成复用原则](#合成复用原则)

### <a id="单一职责原则">1.单一职责原则(single responsibity)</a>
对类来说，一个类应该只负责一项职责

- 降低类的复杂度，一个类只负责一项职责
- 提高类的可读性，可维护性
- 降低变更带来的风险
- 通常情况下，应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则;只有类中方法数量足够少，可以在方法级别保持单一职责原则

### <a id="接口隔离原则">2.接口隔离原则(interface segregation principle)</a>
- 客户端不应该依赖他不需要接口，即一个类对另一个类的依赖应该建立在最小的接口上。

### <a id="依赖倒转原则">3.依赖倒转原则(Dependence Inversion Principle)</a>
- 高层模块不应该依赖低层模块，二者都应该依赖其抽象
- 抽象不应该依赖细节，细节应该依赖抽象
- 依赖倒转的中心思想是面向接口编程
- 设计理念\
    &emsp;&emsp;相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比细节为基础的架构要稳定的多。在Java中，抽象是接口或
抽象类，细节就是具体的实现类。
- 使用接口或抽象类的目的是定制好规范，而不设计任何具体的操作，把展现细节的任务交给实现类去完成

#### 依赖关系传递的三种方式
1. 接口传递
2. 构造方法传递
3. setter方式传递

#### 注意点
1. 低层模块都要有抽象类或者接口，或者两者都有
2. 变量的声明类型尽量是抽象类或者接口，这样引用变量和实际对象间存在缓冲层
3. 继承时遵循里氏替换原则

### <a id="里氏替换原则">4.里氏替换原则(Liskov Substitution Principle)</a>
- 如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都替换成o2时，程序P的行为没有发生变化，
    那么类型T2是类型T1的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。
- 在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法
- 里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖来解决问题。(抽取基类)

### <a id="开闭原则OCP">5.开闭原则OCP(Open Closed Principle)</a>
- 开闭原则是编程中最基础\最重要的设计原则
- 一个软件实体如类,模块 和函数应该对扩展开放,对修改关闭.用抽象构建框架,用实现扩展细节
- 当软件需要变化时,尽量通过扩展软件实体的行为来实现变化,而不是通过修改已有的代码来实现变化
- 编程中遵循其他原则,以及使用设计模式的目的就是遵循开闭原则

### <a id="迪米特法则">6.迪米特法则(Demeter Principle)</a>
- 一个对象应该对其他对象保持最少的了解
- 类与类关系越亲密,耦合度越大
- 迪米特法则又叫最少知道原则,即一个类对自己依赖的类知道的越少越好\
&emsp;&emsp;对于被依赖的类不管多么复杂,都尽量将逻辑
封装在类内部.对外除了提供的public方法,不对外泄露任何信息
- 迪米特法则还有一个简单的定义:只与直接的朋友通信
- 直接的朋友\
&emsp;&emsp;每个对象都会与其他对象有耦合关系,只要两个对象之间有耦合关系,我们就说这两个对象之间是朋友关系.耦合的方式
很多,依赖.关联.组合.聚合等.其中我们称出现成员变量,方法参数,方法返回值中的类为直接的朋友,而出现在局部变量
中的类不是直接的朋友.也就是陌生的类最好不要以局部变量的形式出现在类内部.

### <a id="合成复用原则">7.合成复用原则(Composite Reuse Principle)</a>
&emsp;&emsp;尽量使用合成/聚合的方式,而不是使用继承

#  设计原则核心思想:
- 找出应用中可能需要变化的地方,把他们独立出来,不要和那些不需要变化的代码混在一起
- 针对接口编程,而不是针对实现编程
- 为了交互对象之间的松耦合设计而努力


