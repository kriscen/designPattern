设计模式七大原则
    1.单一职责原则(single responsibity)
        对类来说，一个类应该只负责一项职责

        a.降低类的复杂度，一个类只负责一项职责
        b,提高类的可读性，可维护性
        c.降低变更带来的风险
        d.通常情况下，应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则;只有类中方法数量足够少，可以在方法级别保持单一职责原则

    2.接口隔离原则(interface segregation principle)
        客户端不应该依赖他不需要接口，即一个类对另一个类的依赖应该建立在最小的接口上。

    3.依赖倒转原则(Dependence Inversion Principle)

        a.高层模块不应该依赖低层模块，二者都应该依赖其抽象
        b.抽象不应该依赖细节，细节应该依赖抽象
        c.依赖倒转的中心思想是面向接口编程
        d.设计理念：
            相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比细节为基础的架构要稳定的多。在Java中，抽象是接口或
            抽象类，细节就是具体的实现类。
        e.使用接口或抽象类的目的是定制好规范，而不设计任何具体的操作，把展现细节的任务交给实现类去完成

        依赖关系传递的三种方式
            1)接口传递
            2)构造方法传递
            3)setter方式传递

    4.里氏替换原则


    5.开闭原则OCP


    6.迪米特法则


    7.合成复用原则





